Show what the scenes will look like, describe the interaction, and identify the Unity components & script functionality required.

Identify at least three features (distinct chunks of functionality, or steps of the development) of your
scenes. For each feature, use at least one page (A4 or letter) to describe and problem-solve how to
achieve this functionality, including pseudocode and diagrams/maths/notes as required.

You will make a branch for each feature, and implement that functionality on this branch, making at least
one commit to the branch. The scenes should run without errors when you are finished with this feature
(even if it doesn’t do much yet). You will merge the branch into main before starting work on the next
feature.

PseudocodeFeauture.cs (feature here)
- Input
- Functionality
- Components
- Pseudocode:
  - Pseudocode here


Chosen: Factory builder game
- Limited area to build a factory to produce the maximum output
- Reaching certain "goals" (units of output per second) unlocks new buildings
- Buildings (order of unlock): Output, miner, conveyor, assembler/combiner, underground conveyor, splitter
- Toolbar to place buildings at the bottom
- UI for stats (output rates) at the top

Features: World, WorldTile, Tile, TileInput, TileOutput, FactoryBuilding, [Building subclasses], Product,
    ProductObject, Recipe, Goal, Toolbar, HUD, FactoryManager

World.cs
- Stores the state of the world (placed buildings, where resources are, etc)
- Creates the WorldTile objects
- No other components - empty GameObject
- Pseudocode:
  - Variables: worldTilePrefab, worldTileSize, worldSize (vec2int), resourceLocations, worldTiles, buildings, tileToBuilding
  - Start => create world tiles, store in worldTiles dict
  - fn CanPlaceBuilding(position, building) => returns true if the necessary tiles are clear
  - fn PlaceBuilding(position, building) => checks if it can be built, adds building to list, adds building tiles to tileToBuilding dict, sets building position and sets it as active
  - fn RemoveBuilding(building) => removes building and tiles from list/dict, destroys object

WorldTile.cs
- Displays the state of one tile in the world (really just if any resources are there)
- Updates its graphics to match the state when it is created
- Has a SpriteRenderer attached
- Pseudocode:
  - Variables: spriteRenderer, tileType
  - Start => set sprite to match the tileType (get the sprites from FactoryManager)

Tile.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

TileInput.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

TileOutput
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

FactoryBuilding.cs (see subclasses at bottom)
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

Product.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

ProductObject.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

Recipe.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

Goal.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

Toolbar.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

HUD.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

FactoryManager.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here

[SUBCLASSES]

PseudocodeFeauture.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables: 
  - Pseudocode here
